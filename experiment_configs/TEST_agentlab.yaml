# If you want to have user input or be a human-in-the-loop
copilot-mode: False

# Here is the research prompt. If num-papers-to-write > 1, you can treat this as a "research direction" otherwise it can be *very* specific and can be treated as a full research idea
research-topic: "Your goal is to Analyzing the Impact of Socioeconomic Factors on Divorce Rates Using Public Data."

# Here you can put your OpenAI API key--if you don't have one or OpenAI doesn't work for you, you can also instead use `deepseek-api-key`
api-key: "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"
# or deepseek-api-key: "DEEPSEEK-API-KEY-HERE"
# Agent Laboratory backend
llm-backend: "gpt-4o-mini"
# Literature review backend
lit-review-backend: "gpt-4o-mini"

# Base language
language: "English"

# Number of arxiv papers to lit review
num-papers-lit-review: 5
# Total number of papers to write in sequence
num-papers-to-write: 1
# Do you want to run multiple agent labs in parallel?
parallel-labs: False

# Total mle-solver steps per lab
mlesolver-max-steps: 3
# Total paper-solver steps per lab
papersolver-max-steps: 1
# The lab index for this lab (used for parallel runs)
lab-index: 1
# If you want to load an existing save
load-existing: False
# If fail, run exception?
except-if-fail: False
# Compile latex into PDFs during paper-solver
compile-latex: False

# Task notes
task-notes:
  plan-formulation:
    - "Identify 2-3 key socioeconomic factors (e.g., income, education, employment) to analyze for correlation with divorce rates."  
    - "Use publicly available datasets (e.g., CDC, Pew Research, or World Bank) for divorce and socioeconomic data."  
    - "Baseline: Compare divorce rates across demographic groups (e.g., by income bracket or education level)."  
    - "Focus on one clear hypothesis (e.g., 'Lower income correlates with higher divorce rates')."  
    - "Use simple statistical methods (e.g., correlation, regression) for analysis."  
  data-preparation:
    - "Source datasets (e.g., CDC divorce statistics, census income data)."  
    - "Clean and merge datasets."  
    - "Normalize data (e.g., divorce rates per 1,000 people)."  
  running-experiments:
    - "All data loading must use proper public data APIs or official government datasets"
    - 'Use pandas and statsmodels for all statistical analysis'
    - 'The baseline correlation coefficient between income and divorce rates in US data is typically -0.4 to -0.6'
    - 'You can access census data using censusdata package with query_census_api(metrics=["DP02_0065PE", "DP03_0062E"], year=2020)'
    - 'You must evaluate on complete state-level data (all 50 states + DC)'
    - "Develop ONE focused experiment examining how education level mediates the income-divorce relationship"
    - "Use scipy.stats.pearsonr for correlation tests and statsmodels for regression analysis"
    - 'Use this code template for initial data loading:\nimport censusdata\n\ndef get_socioeconomic_data():\n    indicators = {\n        "divorce_rate": "DP02_0065PE",\n        "median_income": "DP03_0062E",\n        "bachelors_degree": "DP02_0068PE"\n    }\n    return censusdata.download("acs5", 2020, censusdata.censusgeo([("state", "*")]), list(indicators.values()))'
    - "YOUR ANALYSIS MUST BE PARALLELIZED FOR EFFICIENT PROCESSING"
    - "Create publication-quality visualizations using seaborn and matplotlib"
    - 'You have access to: US Census, ACS, BLS, and CDC data sources'
    - 'Sample analysis code structure:\nimport multiprocessing\nimport statsmodels.api as sm\n\ndef process_state(state_data):\n    X = state_data[["income", "education"]]\n    X = sm.add_constant(X)\n    y = state_data["divorce_rate"]\n    model = sm.OLS(y, X).fit()\n    return model.params\n\ndef main():\n    full_data = load_and_clean_data()\n multiprocessing.Pool() as pool:\nresults = pool.map(process_state, [data for state, data in full_data.groupby("state")])\nreturn pd.DataFrame(results)'
    - 'Generate visualizations with:\n- Professional academic styling\n- Clear explanatory annotations\n- Colorblind-friendly palettes\n- Proper axis labeling'
    - "For mapping visualizations, use geopandas with state boundaries"
    - 'Required analyses:\n1. Correlation matrix of all variables\n2. Linear regression of divorce rates on socioeconomic factors\n3. Mediation analysis of education effects\n4. Regional comparison (by census division)'
    - "All figures must include:\n- 95% confidence intervals where applicable\n- Proper significance markers\n- Adjusted R-squared values for models"
    - 'Use this color palette for visualizations:\nDIVERGING_PALETTE = ["#2166ac", "#4393c3", "#92c5de", "#d1e5f0", "#f7f7f7", "#fddbc7", "#f4a582", "#d6604d", "#b2182b"]'
    - "Include these statistical controls in all models:\n- State population density\n- Median age\n- Religious adherence rates (if available)"
    - 'For geospatial visualization code:\nimport geopandas as gpd\nfrom matplotlib.colors import LinearSegmentedColormap\n\nstates = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip")\nmerged = states.merge(results_df, left_on="NAME", right_on="state")\nfig, ax = plt.subplots(1, 1, figsize=(16, 9))\nmerged.plot(column="divorce_rate", cmap=LinearSegmentedColormap.from_list("diverging", DIVERGING_PALETTE),\nlegend=True, ax=ax, edgecolor="0.8")\nax.set_title("Divorce Rates by State", fontsize=14)\nplt.tight_layout()'
  results-interpretation:
    - "Highlight statistically significant findings (e.g., 'Divorce rates are 20% higher in low-income groups')."  
    - "Discuss limitations."
  report-writing:
    - "Structure: Introduction (hypothesis), Methods (data sources), Results (plots + stats), Discussion."